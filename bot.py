import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import os
import re

API_TOKEN = "7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o"
OPERATORS = [5498505652]  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}  # user_id: {name, phone, awaiting}
active_chats = {}  # operator_reply_mode: user_id

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    keyboard.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏ ‚Äî –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏:", reply_markup=keyboard)

# –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è:", reply_markup=types.ReplyKeyboardRemove())

# –Ü–º‚Äô—è
@dp.message_handler(lambda m: m.text and m.from_user.id in user_state and 'name' not in user_state[m.from_user.id])
async def handle_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    user_state[message.from_user.id]['awaiting'] = False
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=keyboard)

# –ü–æ–∫–∞–∑–∞—Ç–∏ —É–º–æ–≤–∏
@dp.message_handler(lambda m: m.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def show_terms(message: types.Message):
    with open("full_temp_terms.pdf", "rb") as doc:
        await bot.send_document(message.chat.id, doc)

# –ó–≤‚Äô—è–∑–æ–∫ —ñ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
@dp.message_handler(lambda m: m.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def connect_operator(message: types.Message):
    user_state[message.from_user.id]['awaiting'] = True
    user_state[message.from_user.id]['active'] = True
    await message.answer("üìù –ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–±–∞—á–∏—Ç—å –π–æ–≥–æ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å.", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))

    # –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 10 —Ö–≤
    async def auto_close():
        await asyncio.sleep(600)
        if user_state.get(message.from_user.id, {}).get('active'):
            user_state[message.from_user.id]['active'] = False
            await bot.send_message(message.chat.id, "‚åõ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.")
            for op in OPERATORS:
                await bot.send_message(op, f"‚ö†Ô∏è –†–æ–∑–º–æ–≤–∞ –∑ <b>{user_state[message.from_user.id]['name']}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–Ω–µ –±—É–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ 10 —Ö–≤).", parse_mode='HTML')
    asyncio.create_task(auto_close())

# –í–∏—Ö—ñ–¥ —ñ–∑ —á–∞—Ç—É
@dp.message_handler(lambda m: m.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    user_id = message.from_user.id
    user_state[user_id]['active'] = False
    await message.answer("‚úÖ –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–æ–∑–º–æ–≤—É.", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"))
    for op in OPERATORS:
        await bot.send_message(op, f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <b>{user_state[user_id]['name']}</b> –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.", parse_mode='HTML')

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message_handler(lambda m: user_state.get(m.from_user.id, {}).get("active"))
async def forward_to_operator(message: types.Message):
    uid = message.from_user.id
    user = user_state[uid]
    text = f"üì© –ó–∞–ø–∏—Ç –≤—ñ–¥ <b>{user['name']}</b> (<code>{user['phone']}</code>):\n{message.text}\n\n<user_id:{uid}>"
    for op in OPERATORS:
        await bot.send_message(op, text, parse_mode='HTML')

    await message.answer("üì® –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

# –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–ø–æ reply)
@dp.message_handler(lambda m: m.from_user.id in OPERATORS and m.reply_to_message)
async def handle_operator_reply(message: types.Message):
    match = re.search(r"<user_id:(\d+)>", message.reply_to_message.text or "")
    if not match:
        return await message.reply("‚ùó –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ reply –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    user_id = int(match.group(1))
    try:
        await bot.send_message(user_id, f"üë®‚Äçüíº –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")
    except:
        await message.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
