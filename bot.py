import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.exceptions import BotBlocked
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = "7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o"
OPERATORS = [5498505652]  # ID –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}  # user_id: {'phone': '', 'name': '', 'chat_active': True}
active_chats = {}  # user_id: operator_id
operator_chats = {}  # operator_id: user_id
TERMS_FILE_ID = "<your_telegram_file_id_for_pdf>"  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –¥—ñ–π—Å–Ω–∏–π file_id

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True),
    KeyboardButton("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
)

def chat_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"))

def back_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥"))

def end_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏.", reply_markup=main_keyboard)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def get_name(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è:", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(lambda msg: msg.text and msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def save_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=chat_keyboard())

@dp.message_handler(lambda msg: msg.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def show_terms(message: types.Message):
    try:
        await bot.send_document(message.chat.id, TERMS_FILE_ID)
    except:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª.")

@dp.message_handler(lambda msg: msg.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def connect_to_operator(message: types.Message):
    uid = message.from_user.id
    user_state[uid]['chat_active'] = True
    active_chats[uid] = None
    await message.answer("‚úçÔ∏è –û–ø–∏—à—ñ—Ç—å —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É. –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤–∞–º —Ç—É—Ç.", reply_markup=end_keyboard())
    asyncio.create_task(auto_end_chat(uid))

async def auto_end_chat(uid):
    await asyncio.sleep(600)  # 10 —Ö–≤–∏–ª–∏–Ω
    if uid in active_chats and active_chats[uid] is None:
        await bot.send_message(uid, "‚åõ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.", reply_markup=chat_keyboard())
        user_state[uid]['chat_active'] = False
        active_chats.pop(uid, None)

@dp.message_handler(lambda msg: msg.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    uid = message.from_user.id
    operator_id = active_chats.get(uid)
    if operator_id:
        await bot.send_message(operator_id, f"üî¥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {uid} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")
        operator_chats.pop(operator_id, None)
    active_chats.pop(uid, None)
    user_state[uid]['chat_active'] = False
    await message.answer("‚úÖ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=chat_keyboard())

@dp.message_handler(lambda msg: user_state.get(msg.from_user.id, {}).get('chat_active'))
async def user_to_operator(message: types.Message):
    uid = message.from_user.id
    name = user_state[uid].get('name', '–ù–µ–≤—ñ–¥–æ–º–æ')
    phone = user_state[uid].get('phone', '-')
    text = message.text
    for op in OPERATORS:
        await bot.send_message(op, f"üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {name} ({phone}, id:{uid}):\n{text}\n\n–©–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ reply")
    await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")

@dp.message_handler(lambda msg: msg.reply_to_message and msg.from_user.id in OPERATORS)
async def operator_reply(message: types.Message):
    original = message.reply_to_message.text
    uid = None
    for line in original.splitlines():
        if "id:" in line:
            uid = int(line.split("id:")[-1].replace(")", "").strip())
            break
    if uid:
        await bot.send_message(uid, f"üë®‚Äçüíª –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {message.text}", reply_markup=end_keyboard())
        active_chats[uid] = message.from_user.id
        operator_chats[message.from_user.id] = uid

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
