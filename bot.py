import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputFile
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")  # –£ .env —Ñ–∞–π–ªi: API_TOKEN=—Ç–æ–∫–µ–Ω —Ç–≤–æ–≥–æ –±–æ—Ç–∞
ADMIN_CHAT_ID = 5498505652  # ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

user_state = {}
forwarded_messages = {}  # –ó–±–µ—Äi–≥–∞—î–º–æ —è–∫–∏–π forward_message_id –Ω–∞–ª–µ–∂–∏—Ç—å —è–∫–æ–º—É user_id

# –ö–ª–∞–≤i–∞—Ç—É—Ä–∏
def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    kb.add(KeyboardButton("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp"))
    return kb

def contact_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üí¨ –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"))
    return kb

def back_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return kb

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_state.pop(message.from_user.id, None)
    forwarded_messages.clear()
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ! –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏.", reply_markup=start_keyboard())

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(lambda msg: msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def handle_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=contact_keyboard())

@dp.message_handler(lambda msg: msg.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def send_terms(message: types.Message):
    try:
        doc = InputFile("full_temp_terms.pdf")
        await bot.send_document(message.chat.id, doc, caption="üìé –û–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ —É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
    except:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —É–º–æ–≤.")

@dp.message_handler(lambda msg: msg.text == "üí¨ –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def connect_to_operator(message: types.Message):
    if message.from_user.id not in user_state:
        return await message.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —Ç–∞ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º.")
    user_state[message.from_user.id]['chat_active'] = True
    await message.answer("üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –Ω–∏–∂—á–µ.", reply_markup=back_keyboard())

@dp.message_handler(lambda msg: user_state.get(msg.from_user.id, {}).get('chat_active'))
async def forward_to_operator(message: types.Message):
    user = user_state.get(message.from_user.id)
    if user:
        header = f"üë§ {user['name']} ({user['phone']})"
        header_msg = await bot.send_message(ADMIN_CHAT_ID, header)
        forwarded = await bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)
        # –ó–±–µ—Äi–≥–∞—î–º–æ –≤ —Å–ª–æ–≤–Ω–∏–∫—É –ø—Ä–∏–≤'—è–∑–∫—É forward_id -> user_id
        forwarded_messages[forwarded.message_id] = message.from_user.id

@dp.message_handler(lambda msg: msg.reply_to_message and msg.from_user.id == ADMIN_CHAT_ID)
async def admin_reply(message: types.Message):
    reply = message.reply_to_message
    if not reply:
        return
    user_id = forwarded_messages.get(reply.message_id)
    if not user_id:
        await message.answer("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
        return
    try:
        await bot.send_message(user_id, f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {message.text}")
    except:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")

@dp.message_handler(lambda msg: msg.text == "üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    user_id = message.from_user.id
    user_state.pop(user_id, None)
    # –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ forwarded –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –±—É–ª–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    forwarded_messages_to_delete = [fid for fid, uid in forwarded_messages.items() if uid == user_id]
    for fid in forwarded_messages_to_delete:
        forwarded_messages.pop(fid, None)
    await message.answer("üîö –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.", reply_markup=start_keyboard())
    await bot.send_message(ADMIN_CHAT_ID, f"üîî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
