import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputFile
from aiogram.utils.exceptions import BotBlocked
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")  # –í–∞—à —Ç–æ–∫–µ–Ω —É .env —Ñ–∞–π–ª—ñ
OPERATORS = [5498505652]  # ID –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤
OPERATOR_NAME = "TEMP Support"  # –Ü–º'—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

user_state = {}  # –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
active_chats = {}  # –ê–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    kb.add(KeyboardButton("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"))
    return kb

def contact_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üí¨ –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"))
    return kb

def end_chat_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return kb

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_state.pop(message.from_user.id, None)
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ –≤ —Å–ª—É–∂–±—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ TEMP! –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.", reply_markup=start_keyboard())

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞
@dp.message_handler(content_types=types.ContentType.CONTACT)
async def contact_handler(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=ReplyKeyboardRemove())

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ —Ç–∞ –ø–∏—Ç–∞–Ω–Ω—è
@dp.message_handler(lambda message: message.from_user.id in user_state and 'name' not in user_state[message.from_user.id])
async def name_handler(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    await message.answer("üìù –û–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è:")

@dp.message_handler(lambda message: message.from_user.id in user_state and 'issue' not in user_state[message.from_user.id] and 'name' in user_state[message.from_user.id])
async def issue_handler(message: types.Message):
    user_state[message.from_user.id]['issue'] = message.text
    user_state[message.from_user.id]['chat_active'] = True
    active_chats[message.from_user.id] = True

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–æ –Ω–æ–≤—É –∑–∞—è–≤–∫—É
    for operator_id in OPERATORS:
        await bot.send_message(operator_id, 
            f"üöÄ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞!

üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: <b>{user_state[message.from_user.id]['name']}</b>
üìû –ù–æ–º–µ—Ä: <b>{user_state[message.from_user.id]['phone']}</b>

üí¨ –ü–∏—Ç–∞–Ω–Ω—è:
<code>{user_state[message.from_user.id]['issue']}</code>",
            parse_mode='HTML')

    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–µ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=end_chat_keyboard())

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
@dp.message_handler(lambda message: active_chats.get(message.from_user.id))
async def forward_user_message(message: types.Message):
    user = user_state.get(message.from_user.id)
    if not user:
        return
    for operator_id in OPERATORS:
        await bot.send_message(operator_id, 
            f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ <b>{user['name']}</b>:
{message.text}",
            parse_mode='HTML')

# –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å–≤–∞–π–ø–æ–º (Reply)
@dp.message_handler(lambda message: message.reply_to_message and message.from_user.id in OPERATORS)
async def operator_reply(message: types.Message):
    try:
        replied_text = message.reply_to_message.text
        name_line = replied_text.split('\n')[0]
        username = name_line.split(':')[1].strip()

        # –ó–Ω–∞–π—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ —ñ–º'—è–º
        target_user_id = None
        for user_id, data in user_state.items():
            if data.get('name') == username:
                target_user_id = user_id
                break

        if target_user_id:
            await bot.send_message(target_user_id, f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {OPERATOR_NAME}:
{message.text}")
    except Exception as e:
        await message.reply("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏
@dp.message_handler(lambda message: message.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    user_id = message.from_user.id
    active_chats.pop(user_id, None)
    user_state.pop(user_id, None)
    await message.answer("üîî –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è.", reply_markup=ReplyKeyboardRemove())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
