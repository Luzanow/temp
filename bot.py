import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")  # –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
OPERATORS = [5498505652]  # –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤, –∑–º—ñ–Ω—ñ—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ñ

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

user_state = {}
active_chats = {}

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True))
    return kb

def waiting_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return kb

def operator_accept_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return kb

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_state.pop(message.from_user.id, None)
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ —É —Å–ª—É–∂–±—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ <b>TEMP</b>!\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
        reply_markup=start_keyboard()
    )

# –ö–æ–Ω—Ç–∞–∫—Ç
@dp.message_handler(content_types=types.ContentType.CONTACT)
async def contact_handler(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –Ω–æ–º–µ—Ä –ø–æ–¥—ñ–ª–µ–Ω–∏–π
    await message.answer("üñä –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:", reply_markup=types.ReplyKeyboardRemove())

# –Ü–º'—è
@dp.message_handler(lambda m: m.from_user.id in user_state and 'name' not in user_state[m.from_user.id])
async def name_handler(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    await message.answer("üìù –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:")

# –ü–∏—Ç–∞–Ω–Ω—è
@dp.message_handler(lambda m: m.from_user.id in user_state and 'question' not in user_state[m.from_user.id])
async def question_handler(message: types.Message):
    user_state[message.from_user.id]['question'] = message.text
    user_id = message.from_user.id

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    for op_id in OPERATORS:
        await bot.send_message(
            op_id,
            f"üÜï <b>–ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b> üÜï\n\n"
            f"üë§ –Ü–º'—è: <b>{user_state[user_id]['name']}</b>\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{user_state[user_id]['phone']}</code>\n\n"
            f"üìù –ü–∏—Ç–∞–Ω–Ω—è:\n<blockquote>{user_state[user_id]['question']}</blockquote>\n\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, —â–æ–± –ø–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ ‚¨áÔ∏è",
            parse_mode="HTML",
            reply_markup=operator_accept_keyboard()
        )

    await message.answer(
        "‚è≥ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ ‚Äî –º–∏ –ø—ñ–¥'—î–¥–Ω—É—î–º–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...",
        reply_markup=waiting_keyboard()
    )

    asyncio.create_task(waiting_timeout(user_id))

async def waiting_timeout(user_id):
    await asyncio.sleep(300)
    if user_id in user_state and user_id not in active_chats:
        await bot.send_message(user_id, "‚è≥ –í–∏–±–∞—á—Ç–µ, –≤—Å—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ –∑–∞–π–Ω—è—Ç—ñ. –ú–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∞–º –≤—ñ–¥–ø–æ–≤—ñ–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!")

# –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–π–º–∞—î —Ä–æ–∑–º–æ–≤—É
@dp.message_handler(lambda message: message.text == "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ —Ä–æ–∑–º–æ–≤—É" and message.from_user.id in OPERATORS)
async def accept_chat(message: types.Message):
    user_id = message.reply_to_message.from_user.id
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ —Ç–µ, —â–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è
    await bot.send_message(user_id, f"üéâ –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —á–∞—Ç—É! –ü–æ—á–∏–Ω–∞–π—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è!")
    active_chats[user_id] = {'operator_id': message.from_user.id}

    await message.answer("üí¨ –í–∏ —Ç–µ–ø–µ—Ä —É —á–∞—Ç—ñ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.", reply_markup=waiting_keyboard())

# –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
@dp.message_handler(lambda m: m.from_user.id in active_chats)
async def operator_reply(message: types.Message):
    user_id = active_chats[message.from_user.id]['operator_id']
    await bot.send_message(
        user_id,
        f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–∏—à–µ:\n\n{message.text}",
        parse_mode="HTML"
    )

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–∞—Ç—É
@dp.message_handler(lambda m: m.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    user_id = message.from_user.id

    if user_id in active_chats:
        op_id = active_chats[user_id]['operator_id']
        await bot.send_message(op_id, f"üîî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_state[user_id]['name']} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")
        active_chats.pop(user_id, None)
        await message.answer(
            "‚úÖ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.",
            reply_markup=start_keyboard()
        )

    elif user_id in [chat.get('operator_id') for chat in active_chats.values()]:
        for uid, chat in list(active_chats.items()):
            if chat.get('operator_id') == user_id:
                await bot.send_message(uid, "üîî –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")
                active_chats.pop(uid, None)

        await message.answer(
            "‚úÖ –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞.",
            reply_markup=types.ReplyKeyboardRemove()
        )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
