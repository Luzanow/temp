import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_CHAT_ID = 5498505652
OPERATOR_NAME = "–¢–∞—Ä–∞—Å"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

active_chats = {}  # user_id -> operator_id
waiting_users = {}

# –ö–ª–∞–≤i–∞—Ç—É—Ä–∏
def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    return kb

def end_chat_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return kb

def operator_accept_keyboard(user_id):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É", callback_data=f"accept_{user_id}"))
    return kb

def operator_end_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É", callback_data="end_chat"))
    return kb

# /start
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("üöÄ –ü–æ—á–Ω–µ–º–æ –Ω–∞—à—É —Ä–æ–∑–º–æ–≤—É! –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚Äî —ñ –º–∏ –º–∏—Ç—Ç—î–≤–æ –∑ –≤–∞–º–∏ –Ω–∞ –∑–≤'—è–∑–∫—É. ‚ù§Ô∏è", reply_markup=start_keyboard())

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è:", reply_markup=ReplyKeyboardRemove())
    active_chats[message.from_user.id] = {'phone': message.contact.phone_number, 'name': None, 'operator': None}

@dp.message_handler(lambda msg: msg.from_user.id in active_chats and active_chats[msg.from_user.id]['name'] is None)
async def handle_name(message: types.Message):
    active_chats[message.from_user.id]['name'] = message.text
    await message.answer("üëã –î—è–∫—É—î–º–æ! –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. üöÄ", reply_markup=end_chat_keyboard())

    user = active_chats[message.from_user.id]
    await bot.send_message(
        ADMIN_CHAT_ID,
        f"üÜï –ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!\n–Ü–º'—è: {user['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}",
        reply_markup=operator_accept_keyboard(message.from_user.id)
    )

    task = asyncio.create_task(wait_operator_response(message.from_user.id))
    waiting_users[message.from_user.id] = task

async def wait_operator_response(user_id):
    await asyncio.sleep(300)
    if user_id in active_chats and active_chats[user_id]['operator'] is None:
        await bot.send_message(user_id, "üòî –í–∏–±–∞—á—Ç–µ, –≤—Å—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ –∑–∞–π–Ω—è—Ç—ñ. –ú–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ —Å–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—å! ‚ù§Ô∏è")
        waiting_users.pop(user_id, None)

@dp.callback_query_handler(lambda c: c.data.startswith('accept_'))
async def accept_chat(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    active_chats[user_id]['operator'] = ADMIN_CHAT_ID

    await bot.send_message(user_id, f"üéâ –û–ø–µ—Ä–∞—Ç–æ—Ä {OPERATOR_NAME} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —á–∞—Ç—É! –ú–æ–∂–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è.")
    await callback_query.message.edit_text(f"‚úÖ –í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ {active_chats[user_id]['name']}", reply_markup=operator_end_keyboard())

    if user_id in waiting_users:
        waiting_users[user_id].cancel()
        waiting_users.pop(user_id, None)

@dp.callback_query_handler(lambda c: c.data == 'end_chat')
async def operator_end_chat(callback_query: types.CallbackQuery):
    user_id = None
    for uid, chat in active_chats.items():
        if chat.get('operator') == ADMIN_CHAT_ID:
            user_id = uid
            break
    if user_id:
        await bot.send_message(user_id, "üîö –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è! üåü", reply_markup=ReplyKeyboardRemove())
        await callback_query.message.edit_text("‚úÖ –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–æ–∑–º–æ–≤—É. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –Ω–æ–≤–∏–π —á–∞—Ç.")
        active_chats.pop(user_id, None)

@dp.message_handler(lambda msg: msg.from_user.id == ADMIN_CHAT_ID)
async def operator_messages(message: types.Message):
    for user_id, info in active_chats.items():
        if info.get('operator') == ADMIN_CHAT_ID:
            await bot.send_message(user_id, f"üí¨ {OPERATOR_NAME}:\n\n{message.text}")
            break

@dp.message_handler()
async def user_messages(message: types.Message):
    if message.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É":
        if message.from_user.id in active_chats:
            await bot.send_message(message.from_user.id, "üîö –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è! üåü", reply_markup=ReplyKeyboardRemove())
            if active_chats[message.from_user.id]['operator']:
                await bot.send_message(ADMIN_CHAT_ID, f"üîî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {active_chats[message.from_user.id]['name']} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")
            active_chats.pop(message.from_user.id, None)
        return
    if message.from_user.id in active_chats and active_chats[message.from_user.id]['operator']:
        await bot.send_message(ADMIN_CHAT_ID, f"üí¨ {active_chats[message.from_user.id]['name']}:\n\n{message.text}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
