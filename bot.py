import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = "7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o"
OPERATORS = [5498505652]  # ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}  # –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
active_chats = {}  # –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç—É –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º

TERMS_PATH = "full_temp_terms.pdf"

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥

def back_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥"))
    return keyboard

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    keyboard.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏.", reply_markup=keyboard)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
@dp.message_handler(content_types=types.ContentType.CONTACT)
async def get_name(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è:", reply_markup=types.ReplyKeyboardRemove())

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
@dp.message_handler(lambda msg: msg.text and msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def save_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"))
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=keyboard)

# –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
@dp.message_handler(lambda msg: msg.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def show_terms(message: types.Message):
    try:
        await bot.send_document(message.chat.id, InputFile(TERMS_PATH))
    except Exception as e:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–∞–π–ª. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –π–æ–≥–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å.")

# –ü–æ—á–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
@dp.message_handler(lambda msg: msg.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def connect_to_operator(message: types.Message):
    user_state[message.from_user.id]['active'] = True
    active_chats[message.from_user.id] = None
    await message.answer("üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–±–∞—á–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å.", reply_markup=types.ReplyKeyboardRemove())

    await asyncio.sleep(600)
    if user_state.get(message.from_user.id, {}).get('active'):
        await message.answer("‚åõ –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞—Ä–∞–∑—ñ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤. –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=main_menu_keyboard())
        user_state[message.from_user.id]['active'] = False
        for op in OPERATORS:
            await bot.send_message(op, f"‚ùó –†–æ–∑–º–æ–≤–∞ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {message.from_user.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")

# –û—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é

def main_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    return keyboard

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message_handler(lambda msg: user_state.get(msg.from_user.id, {}).get('active'))
async def forward_to_operator(message: types.Message):
    user = user_state[message.from_user.id]
    for op in OPERATORS:
        sent = await bot.send_message(op, f"üì© –í—ñ–¥: {user['name']} ({user['phone']}):\n{message.text}")
        active_chats[msg.from_user.id] = op
        active_chats[op] = msg.from_user.id

# –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–≤–∞–π–ø–æ–º
@dp.message_handler()
async def operator_reply(message: types.Message):
    if message.reply_to_message:
        for uid, opid in active_chats.items():
            if opid == message.from_user.id:
                try:
                    await bot.send_message(uid, f"üí° –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {message.text}", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
                except:
                    await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")

# –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É
@dp.message_handler(lambda msg: msg.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    uid = message.from_user.id
    if uid in active_chats:
        op = active_chats[uid]
        del active_chats[uid]
        if op:
            del active_chats[op]
            await bot.send_message(op, f"üîï –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {uid} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É")
    await message.answer("üîö –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–æ–≤—É –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –∑–∞ –ø–æ—Ç—Ä–µ–±–∏.", reply_markup=main_menu_keyboard())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
