import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.exceptions import BotBlocked
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o")  # –í—Å—Ç–∞–Ω–æ–≤–∏ —Ü–µ–π —Ç–æ–∫–µ–Ω —É .env —Ñ–∞–π–ª—ñ
OPERATORS = [5498505652]  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}
operator_reply_mode = {}
user_operator_mapping = {}

TERMS_FILE_PATH = "terms.pdf"  # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Ñ–∞–π–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ—Ä—É—á

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    keyboard.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏.", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def get_name(message: types.Message):
    user_state[message.from_user.id] = {
        'phone': message.contact.phone_number,
        'chat_active': False
    }
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda msg: msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def save_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"))
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def connect_to_operator(message: types.Message):
    user_state[message.from_user.id]['chat_active'] = True
    user_operator_mapping[message.from_user.id] = OPERATORS[0]  # –ü—Ä–æ—Å—Ç–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
    await message.answer("üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –Ω–∏–∂—á–µ. –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–±–∞—á–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤–∞–º —Ç—É—Ç.", reply_markup=types.ReplyKeyboardRemove())
    await asyncio.sleep(600)
    if user_state.get(message.from_user.id, {}).get('chat_active'):
        await message.answer("‚åõ –†–æ–∑–º–æ–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å. –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å —Å—Ç–∞—Ä—Ç.")
        operator_id = user_operator_mapping.get(message.from_user.id)
        if operator_id:
            await bot.send_message(operator_id, f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–≤ 10 —Ö–≤. –†–æ–∑–º–æ–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        user_state[message.from_user.id]['chat_active'] = False

@dp.message_handler(lambda message: user_state.get(message.from_user.id, {}).get('chat_active'))
async def forward_to_operator(message: types.Message):
    uid = message.from_user.id
    user = user_state[uid]
    operator_reply_mode[uid] = True
    text = f"üì© <b>{user.get('name')}</b> (<code>{user.get('phone')}</code>):\n{message.text}"
    operator_id = user_operator_mapping[uid]
    await bot.send_message(operator_id, text, parse_mode='HTML')
    await message.answer("üì® –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

@dp.message_handler(commands=['reply'])
async def operator_reply(message: types.Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /reply <user_id> <–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è>")
    user_id = int(parts[1])
    reply_text = parts[2]
    await bot.send_message(user_id, f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {reply_text}")
    await message.reply("‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ.")

@dp.message_handler(lambda msg: msg.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def send_terms(message: types.Message):
    try:
        await message.answer_document(open(TERMS_FILE_PATH, "rb"))
    except:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —É–º–æ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
