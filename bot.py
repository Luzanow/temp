import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils.exceptions import BotBlocked
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = "7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o"
OPERATORS = [5498505652]  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}
operator_reply_mode = {}

TERMS_FILE = "terms.pdf"  # –§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —É —Ç—ñ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    keyboard.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏.", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def get_name(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda msg: msg.text and msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def save_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"))
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def connect_to_operator(message: types.Message):
    user_state[message.from_user.id]['awaiting_response'] = True
    await message.answer("üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –Ω–∏–∂—á–µ. –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–±–∞—á–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤–∞–º —Ç—É—Ç.", reply_markup=types.ReplyKeyboardRemove())
    await asyncio.sleep(180)
    if user_state[message.from_user.id].get('awaiting_response'):
        await message.answer("‚åõ –£—Å—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ –∑–∞—Ä–∞–∑ –∑–∞–π–Ω—è—Ç—ñ. –û—á—ñ–∫—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞. üôè", reply_markup=back_keyboard())

@dp.message_handler(lambda message: user_state.get(message.from_user.id, {}).get('awaiting_response'))
async def forward_to_operator(message: types.Message):
    user = user_state[message.from_user.id]
    user['awaiting_response'] = False
    operator_reply_mode[message.from_user.id] = message.chat.id
    text = f"üì© –ó–∞–ø–∏—Ç –≤—ñ–¥ <b>{user.get('name')}</b> (<code>{user.get('phone')}</code>):\n{message.text}\n\nüë®‚Äçüíª –î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: /reply {message.from_user.id} –≤–∞—à–µ_–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
    for op in OPERATORS:
        await bot.send_message(op, text, parse_mode='HTML')
    await message.answer("üì® –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. üôå", reply_markup=end_chat_keyboard())

@dp.message_handler(commands=['reply'])
async def operator_reply(message: types.Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        return await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /reply <user_id> <–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è>")
    user_id = int(args[1])
    text = args[2]
    try:
        await bot.send_message(user_id, f"üí° –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {text}", reply_markup=end_chat_keyboard())
        await message.reply("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
    except:
        await message.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")

@dp.message_handler(lambda msg: msg.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"))
    await message.answer("üîï –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å —â–µ —Ä–∞–∑ —É –±—É–¥—å-—è–∫–∏–π —á–∞—Å.", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def show_terms(message: types.Message):
    try:
        doc = InputFile(TERMS_FILE)
        await bot.send_document(message.chat.id, doc, caption="üìé –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–∞ TEMP")
    except Exception as e:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


def back_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return keyboard

def end_chat_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
    return keyboard

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
