import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputFile
from dotenv import load_dotenv
import os
from datetime import datetime, timedelta

load_dotenv()

API_TOKEN = "7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o"
OPERATORS = [5498505652]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}
active_chats = {}
timeout_tasks = {}

TERMS_FILE = InputFile("full_temp_terms.pdf")

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    keyboard.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏.", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def get_name(message: types.Message):
    user_state[message.from_user.id] = {
        'phone': message.contact.phone_number,
        'step': 'awaiting_name'
    }
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è:", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(lambda m: user_state.get(m.from_user.id, {}).get('step') == 'awaiting_name')
async def save_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    user_state[message.from_user.id]['step'] = 'menu'
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    keyboard.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def connect_operator(message: types.Message):
    user_id = message.from_user.id
    user_state[user_id]['chat_active'] = True
    active_chats[user_id] = None
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
    await message.answer("üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –Ω–∏–∂—á–µ. –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–±–∞—á–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤–∞–º —Ç—É—Ç.", reply_markup=keyboard)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 10 —Ö–≤–∏–ª–∏–Ω
    if user_id in timeout_tasks:
        timeout_tasks[user_id].cancel()
    timeout_tasks[user_id] = asyncio.create_task(auto_end(user_id))

@dp.message_handler(lambda m: m.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    user_id = message.from_user.id
    user_state[user_id]['chat_active'] = False
    if user_id in timeout_tasks:
        timeout_tasks[user_id].cancel()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    keyboard.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    await message.answer("üîï –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=keyboard)
    if active_chats.get(user_id):
        await bot.send_message(active_chats[user_id], f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_state[user_id]['name']} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")
    active_chats.pop(user_id, None)

@dp.message_handler(lambda m: m.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def send_terms(message: types.Message):
    await bot.send_document(chat_id=message.chat.id, document=TERMS_FILE)

@dp.message_handler()
async def relay_message(message: types.Message):
    user_id = message.from_user.id
    if not user_state.get(user_id, {}).get('chat_active'):
        return

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Å–µ—Å—ñ—ó
    if active_chats[user_id] is None:
        user_info = user_state[user_id]
        for operator_id in OPERATORS:
            sent = await bot.send_message(operator_id,
                f"üì© –ó–∞–ø–∏—Ç –≤—ñ–¥ <b>{user_info['name']}</b> (<code>{user_info['phone']}</code>):\n{message.text}",
                parse_mode='HTML')
            active_chats[user_id] = operator_id
        await message.answer("üì® –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
    else:
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        try:
            await bot.send_message(active_chats[user_id], f"üí¨ {user_state[user_id]['name']}: {message.text}")
        except:
            pass

@dp.message_handler(lambda msg: msg.reply_to_message)
async def operator_reply(message: types.Message):
    # –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    for user_id, operator_id in active_chats.items():
        if operator_id == message.from_user.id:
            try:
                await bot.send_message(user_id, f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {message.text}", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
            except:
                await message.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
            break

def back_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True).add("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")

async def auto_end(user_id):
    await asyncio.sleep(600)  # 10 —Ö–≤–∏–ª–∏–Ω
    if user_state.get(user_id, {}).get('chat_active'):
        user_state[user_id]['chat_active'] = False
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
        keyboard.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
        await bot.send_message(user_id, "‚åõ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=keyboard)
        if active_chats.get(user_id):
            await bot.send_message(active_chats[user_id], f"üîï –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_state[user_id]['name']} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–≤ 10 —Ö–≤–∏–ª–∏–Ω. –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        active_chats.pop(user_id, None)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
