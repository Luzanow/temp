import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from collections import defaultdict
import os

API_TOKEN = "7import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from collections import defaultdict
import os

API_TOKEN = "7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o"
ADMIN_ID = 5498505652  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}
active_chats = {}
timers = {}

# üìÇ –§–∞–π–ª —É–º–æ–≤
TERMS_PATH = "full_temp_terms.pdf"  # –ü–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤ —Ü—ñ–π –∂–µ –ø–∞–ø—Ü—ñ

def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    kb.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    return kb

def support_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    return kb

def back_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
    return kb

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏:", reply_markup=start_keyboard())

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda msg: msg.text and msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def handle_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=support_keyboard())

@dp.message_handler(lambda msg: msg.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def show_terms(message: types.Message):
    if os.path.exists(TERMS_PATH):
        await bot.send_document(message.chat.id, InputFile(TERMS_PATH))
    else:
        await message.answer("‚ùå –§–∞–π–ª —É–º–æ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@dp.message_handler(lambda msg: msg.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def contact_operator(message: types.Message):
    uid = message.from_user.id
    if uid not in active_chats:
        active_chats[uid] = True
        operator_text = f"üì© –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_state[uid]['name']} ({user_state[uid]['phone']}): –æ—á—ñ–∫—É—î –∑–∞–ø–∏—Ç."
        await bot.send_message(ADMIN_ID, operator_text)
        await message.answer("üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=back_keyboard())
        start_inactivity_timer(uid)
    else:
        await message.answer("üì® –í–∏ –≤–∂–µ —É –¥—ñ–∞–ª–æ–∑—ñ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–∑–º–æ–≤—É.", reply_markup=back_keyboard())

@dp.message_handler(lambda msg: msg.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    uid = message.from_user.id
    if uid in active_chats:
        del active_chats[uid]
        stop_inactivity_timer(uid)
        await message.answer("‚úÖ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=support_keyboard())
        await bot.send_message(ADMIN_ID, f"üîï –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_state[uid]['name']} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")
    else:
        await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Ä–æ–∑–º–æ–≤–∏.")

@dp.message_handler(lambda msg: active_chats.get(msg.from_user.id))
async def forward_to_operator(message: types.Message):
    uid = message.from_user.id
    user = user_state.get(uid)
    if not user:
        return
    text = f"üë§ <b>{user['name']}</b> (<code>{user['phone']}</code>):\n{message.text}"
    await bot.send_message(ADMIN_ID, text, parse_mode='HTML')
    start_inactivity_timer(uid)

@dp.message_handler(lambda msg: msg.reply_to_message and msg.chat.id == ADMIN_ID)
async def reply_from_operator(message: types.Message):
    text = message.text
    replied_text = message.reply_to_message.text
    # –≤–∏—Ç—è–≥–Ω—É—Ç–∏ user_id –∑ replied_text
    for uid, user in user_state.items():
        if user['name'] in replied_text or user['phone'] in replied_text:
            if uid in active_chats:
                await bot.send_message(uid, f"üí¨ –û–ø–µ—Ä–∞—Ç–æ—Ä: {text}", reply_markup=back_keyboard())
                return
    await message.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

def start_inactivity_timer(user_id):
    if user_id in timers:
        timers[user_id].cancel()

    async def timeout():
        await asyncio.sleep(600)  # 10 —Ö–≤
        if user_id in active_chats:
            del active_chats[user_id]
            await bot.send_message(user_id, "‚åõ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.")
            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –†–æ–∑–º–æ–≤–∞ –∑ {user_state[user_id]['name']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.")
    
    loop = asyncio.get_event_loop()
    timers[user_id] = loop.create_task(timeout())

def stop_inactivity_timer(user_id):
    if user_id in timers:
        timers[user_id].cancel()
        del timers[user_id]

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
"
ADMIN_ID = 5498505652  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}
active_chats = {}
timers = {}

# üìÇ –§–∞–π–ª —É–º–æ–≤
TERMS_PATH = "full_temp_terms.pdf"  # –ü–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤ —Ü—ñ–π –∂–µ –ø–∞–ø—Ü—ñ

def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    kb.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    return kb

def support_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    return kb

def back_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
    return kb

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏:", reply_markup=start_keyboard())

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda msg: msg.text and msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def handle_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=support_keyboard())

@dp.message_handler(lambda msg: msg.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def show_terms(message: types.Message):
    if os.path.exists(TERMS_PATH):
        await bot.send_document(message.chat.id, InputFile(TERMS_PATH))
    else:
        await message.answer("‚ùå –§–∞–π–ª —É–º–æ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@dp.message_handler(lambda msg: msg.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def contact_operator(message: types.Message):
    uid = message.from_user.id
    if uid not in active_chats:
        active_chats[uid] = True
        operator_text = f"üì© –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_state[uid]['name']} ({user_state[uid]['phone']}): –æ—á—ñ–∫—É—î –∑–∞–ø–∏—Ç."
        await bot.send_message(ADMIN_ID, operator_text)
        await message.answer("üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=back_keyboard())
        start_inactivity_timer(uid)
    else:
        await message.answer("üì® –í–∏ –≤–∂–µ —É –¥—ñ–∞–ª–æ–∑—ñ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–∑–º–æ–≤—É.", reply_markup=back_keyboard())

@dp.message_handler(lambda msg: msg.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    uid = message.from_user.id
    if uid in active_chats:
        del active_chats[uid]
        stop_inactivity_timer(uid)
        await message.answer("‚úÖ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=support_keyboard())
        await bot.send_message(ADMIN_ID, f"üîï –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_state[uid]['name']} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")
    else:
        await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Ä–æ–∑–º–æ–≤–∏.")

@dp.message_handler(lambda msg: active_chats.get(msg.from_user.id))
async def forward_to_operator(message: types.Message):
    uid = message.from_user.id
    user = user_state.get(uid)
    if not user:
        return
    text = f"üë§ <b>{user['name']}</b> (<code>{user['phone']}</code>):\n{message.text}"
    await bot.send_message(ADMIN_ID, text, parse_mode='HTML')
    start_inactivity_timer(uid)

@dp.message_handler(lambda msg: msg.reply_to_message and msg.chat.id == ADMIN_ID)
async def reply_from_operator(message: types.Message):
    text = message.text
    replied_text = message.reply_to_message.text
    # –≤–∏—Ç—è–≥–Ω—É—Ç–∏ user_id –∑ replied_text
    for uid, user in user_state.items():
        if user['name'] in replied_text or user['phone'] in replied_text:
            if uid in active_chats:
                await bot.send_message(uid, f"üí¨ –û–ø–µ—Ä–∞—Ç–æ—Ä: {text}", reply_markup=back_keyboard())
                return
    await message.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

def start_inactivity_timer(user_id):
    if user_id in timers:
        timers[user_id].cancel()

    async def timeout():
        await asyncio.sleep(600)  # 10 —Ö–≤
        if user_id in active_chats:
            del active_chats[user_id]
            await bot.send_message(user_id, "‚åõ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.")
            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –†–æ–∑–º–æ–≤–∞ –∑ {user_state[user_id]['name']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.")
    
    loop = asyncio.get_event_loop()
    timers[user_id] = loop.create_task(timeout())

def stop_inactivity_timer(user_id):
    if user_id in timers:
        timers[user_id].cancel()
        del timers[user_id]

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
