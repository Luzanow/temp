import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.exceptions import BotBlocked
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN") or "7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o"
OPERATORS = [5498505652]  # Telegram ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}
operator_sessions = {}

TERMS_FILE = "terms_temp.pdf"

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    keyboard.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ —É Temp! –©–æ–± –ø–æ—á–∞—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def get_contact(message: types.Message):
    user_state[message.from_user.id] = {
        'phone': message.contact.phone_number,
        'name': None,
        'chatting': False
    }
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda msg: msg.text and msg.from_user.id in user_state and user_state[msg.from_user.id]['name'] is None)
async def set_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    await message.answer("‚úÖ –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –©–æ–± –ø–æ—á–∞—Ç–∏ —á–∞—Ç —ñ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def send_terms(message: types.Message):
    if os.path.exists(TERMS_FILE):
        await message.answer_document(open(TERMS_FILE, 'rb'))
    else:
        await message.answer("‚ùå –§–∞–π–ª —É–º–æ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@dp.message_handler(lambda msg: msg.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def connect_to_operator(message: types.Message):
    user_state[message.from_user.id]['chatting'] = True
    operator_sessions[message.from_user.id] = {'last_message_time': asyncio.get_event_loop().time()}
    await message.answer("üìù –ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤–∞–º —É —Ü—å–æ–º—É —á–∞—Ç—ñ. –©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.", reply_markup=cancel_keyboard())

@dp.message_handler(lambda msg: msg.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    user_state[message.from_user.id]['chatting'] = False
    await message.answer("‚úÖ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é.", reply_markup=types.ReplyKeyboardRemove())
    for op in OPERATORS:
        await bot.send_message(op, f"‚ùó –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_state[message.from_user.id]['name']} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")

@dp.message_handler(lambda msg: user_state.get(msg.from_user.id, {}).get('chatting'))
async def forward_to_operator(message: types.Message):
    uid = message.from_user.id
    operator_sessions[uid]['last_message_time'] = asyncio.get_event_loop().time()
    data = user_state[uid]
    text = f"üì© <b>{data['name']}</b> (<code>{data['phone']}</code>):\n{message.text}\n\n–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏: /reply {uid} <—Ç–µ–∫—Å—Ç>"
    for op in OPERATORS:
        await bot.send_message(op, text, parse_mode="HTML")
    await message.answer("üì® –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")

@dp.message_handler(commands=['reply'])
async def reply_to_user(message: types.Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        return await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /reply <user_id> <—Ç–µ–∫—Å—Ç>")
    uid = int(args[1])
    text = args[2]
    try:
        await bot.send_message(uid, f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n{text}", reply_markup=cancel_keyboard())
        await message.reply("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞.")
    except BotBlocked:
        await message.reply("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞ –∞–±–æ –π–æ–≥–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

async def auto_end_chat():
    while True:
        now = asyncio.get_event_loop().time()
        for uid, session in list(operator_sessions.items()):
            if user_state.get(uid, {}).get('chatting') and now - session['last_message_time'] > 600:
                user_state[uid]['chatting'] = False
                await bot.send_message(uid, "‚åõ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –†–æ–∑–º–æ–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
                for op in OPERATORS:
                    await bot.send_message(op, f"‚ö†Ô∏è –†–æ–∑–º–æ–≤–∞ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_state[uid]['name']} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç.")
                del operator_sessions[uid]
        await asyncio.sleep(30)

def cancel_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
    return kb

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(auto_end_chat())
    executor.start_polling(dp, skip_updates=True)
