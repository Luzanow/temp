import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.exceptions import BotBlocked
import os
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = "7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o"
OPERATORS = [5498505652]  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π —Ä–µ–∞–ª—å–Ω–∏–π Telegram ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}  # –∑–±–µ—Ä—ñ–≥–∞—î –∞–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏
operator_reply_mode = {}  # –∑–≤'—è–∑–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    keyboard.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏.", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number, 'name': None, 'active': False}
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda m: m.text and m.from_user.id in user_state and not user_state[m.from_user.id].get('name'))
async def handle_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏, —â–æ–± –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—å —ñ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def connect_operator(message: types.Message):
    uid = message.from_user.id
    user_state[uid]['active'] = True
    user_state[uid]['timeout'] = asyncio.create_task(auto_end(uid))
    await message.answer("üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å —É —Ü—å–æ–º—É —á–∞—Ç—ñ.", reply_markup=end_keyboard())
    for op in OPERATORS:
        try:
            await bot.send_message(op, f"üì• –ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ {user_state[uid]['name']} ({user_state[uid]['phone']}):\n–û—á—ñ–∫—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        except BotBlocked:
            pass

@dp.message_handler(lambda m: m.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    uid = message.from_user.id
    if uid in user_state and user_state[uid]['active']:
        user_state[uid]['active'] = False
        if 'timeout' in user_state[uid]:
            user_state[uid]['timeout'].cancel()
        for op in OPERATORS:
            await bot.send_message(op, f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_state[uid]['name']} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")
        await message.answer("‚úÖ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=start_keyboard())

@dp.message_handler(lambda m: user_state.get(m.from_user.id, {}).get('active'))
async def forward_to_operator(message: types.Message):
    uid = message.from_user.id
    for op in OPERATORS:
        operator_reply_mode[op] = uid
        await bot.send_message(op, f"üí¨ {user_state[uid]['name']}: {message.text}")
    await message.answer("üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

@dp.message_handler(commands=['reply'])
async def reply_operator(message: types.Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        return await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /reply <user_id> <–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è>")
    uid = int(args[1])
    text = args[2]
    try:
        await bot.send_message(uid, f"üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä: {text}", reply_markup=end_keyboard())
        await message.reply("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
    except:
        await message.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

@dp.message_handler(lambda m: m.from_user.id in OPERATORS and m.reply_to_message)
async def swipe_operator(message: types.Message):
    original_text = message.reply_to_message.text
    for uid, data in user_state.items():
        if data['name'] in original_text:
            await bot.send_message(uid, f"üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä: {message.text}", reply_markup=end_keyboard())
            return await message.reply("‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
    await message.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

@dp.message_handler(lambda m: m.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def show_terms(message: types.Message):
    with open("full_temp_terms.pdf", "rb") as doc:
        await bot.send_document(message.chat.id, doc, caption="üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")

async def auto_end(uid):
    await asyncio.sleep(600)
    if uid in user_state and user_state[uid].get('active'):
        user_state[uid]['active'] = False
        for op in OPERATORS:
            await bot.send_message(op, f"‚è±Ô∏è –†–æ–∑–º–æ–≤—É –∑ {user_state[uid]['name']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.")
        await bot.send_message(uid, "‚åõ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.", reply_markup=start_keyboard())

def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    kb.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    return kb

def end_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
    return kb

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
