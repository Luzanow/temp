import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.exceptions import BotBlocked
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = "7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o"
OPERATORS = [5498505652]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}
active_chats = {}

TERMS_PATH = "full_temp_terms.pdf"

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    keyboard.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏.", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def get_name(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number, 'chatting': False}
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda msg: msg.text and msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def save_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"))
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def connect_to_operator(message: types.Message):
    user_id = message.from_user.id
    user_state[user_id]['chatting'] = True
    active_chats[user_id] = {'operator': OPERATORS[0], 'timeout': asyncio.create_task(chat_timeout(user_id))}
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
    await message.answer("üìù –û–ø–∏—à—ñ—Ç—å —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É. –í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ.", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    uid = message.from_user.id
    if uid in active_chats:
        operator_id = active_chats[uid]['operator']
        del active_chats[uid]
        user_state[uid]['chatting'] = False
        await message.answer("‚ùé –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=start_keyboard())
        await bot.send_message(operator_id, f"üîï –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_state[uid]['name']} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")

@dp.message_handler(lambda msg: msg.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def show_terms(message: types.Message):
    if os.path.exists(TERMS_PATH):
        await message.answer_document(types.InputFile(TERMS_PATH))
    else:
        await message.answer("‚ùå –§–∞–π–ª —É–º–æ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@dp.message_handler()
async def relay_messages(message: types.Message):
    uid = message.from_user.id
    if uid in active_chats and user_state.get(uid, {}).get('chatting'):
        operator_id = active_chats[uid]['operator']
        await bot.send_message(operator_id, f"üì© <b>{user_state[uid]['name']}</b>: {message.text}", parse_mode="HTML")
    elif message.chat.id in OPERATORS:
        parts = message.text.split(" ", 1)
        if len(parts) > 1 and parts[0].isdigit():
            target_id = int(parts[0])
            text = parts[1]
            if target_id in user_state:
                await bot.send_message(target_id, f"üí¨ –û–ø–µ—Ä–∞—Ç–æ—Ä: {text}")
                await message.reply("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
            else:
                await message.reply("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

async def chat_timeout(user_id):
    await asyncio.sleep(600)  # 10 —Ö–≤
    if user_state.get(user_id, {}).get('chatting'):
        user_state[user_id]['chatting'] = False
        await bot.send_message(user_id, "‚è∞ –†–æ–∑–º–æ–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.", reply_markup=start_keyboard())
        operator_id = active_chats[user_id]['operator']
        await bot.send_message(operator_id, f"üîï –†–æ–∑–º–æ–≤–∞ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_state[user_id]['name']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.")
        del active_chats[user_id]

def start_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    keyboard.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    return keyboard

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
