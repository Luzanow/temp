import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")  # –û–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–æ–¥–∞–π —Ç–æ–∫–µ–Ω —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
OPERATORS = [5498505652]  # ID –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

user_state = {}
active_chats = {}

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True))
    kb.add(KeyboardButton("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è TEMP"))
    return kb

def chat_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return kb

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_state.pop(message.from_user.id, None)
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.",
        reply_markup=start_keyboard()
    )

# –ü—Ä–∏–π–º–∞—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç
@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    await message.answer("‚úèÔ∏è –Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è? –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=types.ReplyKeyboardRemove())

# –ü—Ä–∏–π–º–∞—î–º–æ —ñ–º'—è
@dp.message_handler(lambda msg: msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def handle_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    await message.answer("üìù –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:")

# –ü—Ä–∏–π–º–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è
@dp.message_handler(lambda msg: msg.from_user.id in user_state and 'problem' not in user_state[msg.from_user.id] and 'name' in user_state[msg.from_user.id])
async def handle_problem(message: types.Message):
    user_state[message.from_user.id]['problem'] = message.text
    user_state[message.from_user.id]['chat_active'] = True
    active_chats[message.from_user.id] = True

    await message.answer(
        "ü´∞ –î—è–∫—É—î–º–æ! –í–∞—Å –≤—ñ—Ç–∞—î —Å–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ TEMP. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥'—î–¥–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=chat_keyboard()
    )

    for op_id in OPERATORS:
        await bot.send_message(
            op_id,
            f"üì¢ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞!
<b>–Ü–º'—è:</b> {user_state[message.from_user.id]['name']}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_state[message.from_user.id]['phone']}
<b>–ü–∏—Ç–∞–Ω–Ω—è:</b> {user_state[message.from_user.id]['problem']}\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "/accept_{message.from_user.id}" —â–æ–± –ø—Ä–∏–π–Ω—è—Ç–∏."
        )

# –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–π–º–∞—î —á–∞—Ç
@dp.message_handler(lambda msg: msg.text.startswith("/accept_"))
async def accept_chat(message: types.Message):
    try:
        user_id = int(message.text.split("_", 1)[1])
        if user_id in user_state:
            user_state[user_id]['operator_id'] = message.from_user.id
            await bot.send_message(user_id, f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä {message.from_user.first_name} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —á–∞—Ç—É! –í–∏ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏.")
            await bot.send_message(message.from_user.id, "üßë‚Äçüíª –í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—ñ–ª–∫—É–π—Ç–µ—Å—è –≤—ñ–ª—å–Ω–æ!")
    except Exception as e:
        await message.reply("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —á–∞—Ç—É")

# –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
@dp.message_handler()
async def relay_messages(message: types.Message):
    if message.from_user.id in user_state and user_state[message.from_user.id].get('chat_active'):
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        operator_id = user_state[message.from_user.id].get('operator_id')
        if operator_id:
            await bot.send_message(operator_id, f"üí¨ {user_state[message.from_user.id]['name']}: {message.text}")
    elif message.from_user.id in [op for op in OPERATORS]:
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        for uid, info in user_state.items():
            if info.get('operator_id') == message.from_user.id and info.get('chat_active'):
                await bot.send_message(uid, f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ TEMP {message.from_user.first_name}: {message.text}")

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏
@dp.message_handler(lambda msg: msg.text == "üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_state:
        operator_id = user_state[user_id].get('operator_id')
        user_state[user_id]['chat_active'] = False
        active_chats.pop(user_id, None)

        await message.answer("üîö –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.", reply_markup=types.ReplyKeyboardRemove())
        if operator_id:
            await bot.send_message(operator_id, f"üîî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_state[user_id]['name']} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
