import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑ —Ñ–∞–π–ª—É .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
OPERATORS = [5498505652]  # –°–ø–∏—Å–æ–∫ ID –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
def operator_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –¥—ñ–∞–ª–æ–≥"))
    kb.add(KeyboardButton("üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return kb

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    kb.add(KeyboardButton("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp"))
    return kb

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è /start
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.", reply_markup=start_keyboard())

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—ñ–ª—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    # –¢—É—Ç –º–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç —É —Å–ª–æ–≤–Ω–∏–∫—É
    user_id = message.from_user.id
    user_state[user_id] = {'phone': message.contact.phone_number}
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=types.ReplyKeyboardRemove())

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
@dp.message_handler(lambda msg: msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def handle_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∏–∂—á–µ, —â–æ–± –∑–≤'—è–∑–∞—Ç–∏—Å—å –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=operator_keyboard())

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"
@dp.message_handler(lambda msg: msg.text == "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –¥—ñ–∞–ª–æ–≥")
async def connect_to_operator(message: types.Message):
    user_id = message.from_user.id
    user = user_state.get(user_id)
    if not user:
        return await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø–æ—á–∞—Ç–∫—É –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
    for op in OPERATORS:
        await bot.send_message(op, f"üì® –ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ {user['name']} {user['phone']}. –©–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–∏–π–Ω—è—Ç–∏ –¥—ñ–∞–ª–æ–≥'.", reply_markup=operator_keyboard())

    await message.answer("üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.", reply_markup=types.ReplyKeyboardRemove())

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–∏–π–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(lambda msg: msg.reply_to_message and msg.from_user.id in OPERATORS)
async def operator_reply(message: types.Message):
    reply_text = message.reply_to_message.text
    user_id_line = [line for line in reply_text.split('\n') if '>' not in line][-1]
    name = user_id_line.split(':')[0].replace('‚úâÔ∏è', '').strip()
    user_id = next((uid for uid, data in user_state.items() if data.get('name') == name), None)
    
    if not user_id:
        return await message.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await bot.send_message(user_id, f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {message.text}")

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏
@dp.message_handler(lambda msg: msg.text == "üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    user_id = message.from_user.id
    active_chats.pop(user_id, None)
    user_state.get(user_id, {}).pop('chat_active', None)
    await message.answer("üîö –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.", reply_markup=types.ReplyKeyboardRemove())

    for op in OPERATORS:
        await bot.send_message(op, f"üîî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_state.get(user_id, {}).get('name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
