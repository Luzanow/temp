from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import asyncio
import logging
import os

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("API_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

active_chats = {}

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    return kb

# –û–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏ —á–∞—Ç
def operator_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üë• –ü—Ä–∏–π–Ω—è—Ç–∏ —á–∞—Ç"))
    return kb

# –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏
def end_chat_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç"))
    return kb

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ —É —Å–ª—É–∂–±—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ TEMP! –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.", reply_markup=start_keyboard())

# –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message_handler(content_types=types.ContentType.CONTACT)
async def contact_handler(message: types.Message):
    user_id = message.from_user.id
    phone_number = message.contact.phone_number
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    active_chats[user_id] = {"phone": phone_number}
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")

# –û–±—Ä–æ–±–∫–∞ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message_handler(lambda message: message.from_user.id in active_chats and "name" not in active_chats[message.from_user.id])
async def name_handler(message: types.Message):
    user_id = message.from_user.id
    active_chats[user_id]["name"] = message.text
    await message.answer("üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:")

# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message_handler(lambda message: message.from_user.id in active_chats and "question" not in active_chats[message.from_user.id])
async def question_handler(message: types.Message):
    user_id = message.from_user.id
    active_chats[user_id]["question"] = message.text
    await message.answer("‚è≥ –û—á—ñ–∫—É–π—Ç–µ, –º–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=operator_keyboard())

# –ü—Ä–∏–π–æ–º —á–∞—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
@dp.message_handler(lambda message: message.text == "üë• –ü—Ä–∏–π–Ω—è—Ç–∏ —á–∞—Ç" and message.from_user.id in OPERATORS)
async def accept_chat(message: types.Message):
    user_id = message.from_user.id
    if user_id in active_chats:
        operator_id = message.from_user.id
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await bot.send_message(user_id, "üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —á–∞—Ç—É, –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!")
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(operator_id, "‚úÖ –í–∏ –ø—ñ–¥–∫–ª—é—á–∏–ª–∏—Å—è –¥–æ —á–∞—Ç—É. –ü–æ—á–Ω—ñ—Ç—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
        # –î–æ–¥–∞—î–º–æ —á–∞—Ç –¥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö
        active_chats[user_id]['operator_id'] = operator_id

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–∞—Ç—É
@dp.message_handler(lambda message: message.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç" and message.from_user.id in active_chats)
async def end_chat(message: types.Message):
    user_id = message.from_user.id
    if user_id in active_chats:
        operator_id = active_chats[user_id]["operator_id"]
        await bot.send_message(operator_id, "üîî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–µ—Ä—à–∏–≤ —á–∞—Ç.")
        await bot.send_message(user_id, "‚úÖ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞—à–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!")
        active_chats.pop(user_id, None)

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è —á–∞—Ç—É
@dp.message_handler(lambda message: message.from_user.id in active_chats)
async def user_message(message: types.Message):
    operator_id = active_chats[message.from_user.id]["operator_id"]
    await bot.send_message(operator_id, f"üë§ {active_chats[message.from_user.id]['name']} –ø–∏—à–µ:\n{message.text}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
