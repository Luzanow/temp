import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import BotBlocked
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
OPERATORS = [5498505652]  # –°–ø–∏—Å–æ–∫ ID –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)

user_state = {}
active_chats = {}
waiting_operators = {}

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    return kb

def finish_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return kb

def accept_chat_keyboard(user_id):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É", callback_data=f"accept_{user_id}"))
    return kb

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_state.pop(message.from_user.id, None)
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.", reply_markup=start_keyboard())

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def contact_handler(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda msg: msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def name_handler(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    await message.answer("‚ùì –û–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º—É:")

@dp.message_handler(lambda msg: msg.from_user.id in user_state and 'problem' not in user_state[msg.from_user.id] and 'name' in user_state[msg.from_user.id])
async def problem_handler(message: types.Message):
    user_state[message.from_user.id]['problem'] = message.text
    for operator_id in OPERATORS:
        try:
            await bot.send_message(
                operator_id,
                f"üì© –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞!
<b>–Ü–º'—è:</b> {user_state[message.from_user.id]['name']}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_state[message.from_user.id]['phone']}
<b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {user_state[message.from_user.id]['problem']}",
                reply_markup=accept_chat_keyboard(message.from_user.id)
            )
        except BotBlocked:
            continue
    await message.answer("üõéÔ∏è –í–∞—Å –≤—ñ—Ç–∞—î —Å–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ TEMP! –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

    # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è 5 —Ö–≤–∏–ª–∏–Ω
    asyncio.create_task(check_operator_response(message.from_user.id))

async def check_operator_response(user_id):
    await asyncio.sleep(300)  # 5 —Ö–≤–∏–ª–∏–Ω
    if user_id not in active_chats:
        await bot.send_message(user_id, "‚è≥ –í–∏–±–∞—á—Ç–µ, –≤—Å—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ –∑–∞—Ä–∞–∑ –∑–∞–π–Ω—è—Ç—ñ. –ú–∏ —à–≤–∏–¥–∫–æ –∑–Ω–∞–π–¥–µ–º–æ –¥–ª—è –≤–∞—Å —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ.")

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('accept_'))
async def accept_chat(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    operator_id = callback_query.from_user.id
    active_chats[user_id] = operator_id
    active_chats[operator_id] = user_id

    await bot.send_message(operator_id, f"‚úÖ –í–∏ –≤–∑—è–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_state[user_id]['name']} —É —Ä–æ–±–æ—Ç—É. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.", reply_markup=finish_keyboard())
    await bot.send_message(user_id, "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä TEMP –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —á–∞—Ç—É. –í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è.", reply_markup=finish_keyboard())

    await callback_query.answer()

@dp.message_handler(lambda message: message.from_user.id in active_chats)
async def chat_handler(message: types.Message):
    partner_id = active_chats.get(message.from_user.id)
    if not partner_id:
        return
    prefix = "üí¨ –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:"
    if message.from_user.id in OPERATORS:
        prefix = f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ TEMP:"
    try:
        await bot.send_message(partner_id, f"{prefix}\n{message.text}")
    except BotBlocked:
        pass

@dp.message_handler(lambda message: message.text == "üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def finish_chat(message: types.Message):
    partner_id = active_chats.get(message.from_user.id)
    if partner_id:
        await bot.send_message(partner_id, "üîö –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é.", reply_markup=types.ReplyKeyboardRemove())
        active_chats.pop(partner_id, None)
    active_chats.pop(message.from_user.id, None)
    await message.answer("üîö –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó.", reply_markup=types.ReplyKeyboardRemove())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
