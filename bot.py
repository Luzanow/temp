import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.exceptions import BotBlocked
from dotenv import load_dotenv

load_dotenv()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è API-–∫–ª—é—á–∞ –∑ .env —Ñ–∞–π–ª—É
API_TOKEN = os.getenv("API_TOKEN")

if not API_TOKEN:
    print("API Token not found. Please ensure the .env file is configured correctly.")
    exit()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

user_state = {}

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True))
    kb.add(KeyboardButton("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"))
    return kb

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_state[message.from_user.id] = {}
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ! –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏.",
        reply_markup=start_keyboard()
    )

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_state[message.from_user.id]['phone'] = message.contact.phone_number
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:")

@dp.message_handler(lambda msg: msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def handle_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")

@dp.message_handler(lambda msg: msg.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
async def send_terms(message: types.Message):
    try:
        with open('full_temp_terms.pdf', 'rb') as doc:
            await bot.send_document(message.chat.id, doc, caption="üìé –û–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ —É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —É–º–æ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
