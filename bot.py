import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils.exceptions import BotBlocked
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("7862608221:AAFANx6YmUG2IPRiQp9l_ejOHTc12PEABCY"
OPERATORS = [5498505652]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}
active_chats = {}

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥i–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    kb.add(KeyboardButton("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp"))
    return kb

def contact_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"))
    return kb

def back_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return kb

# –û–±—Ä–æ–±–∫–∞ /start
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("üëã –íi—Ç–∞—î–º–æ! –ü–æ–¥i–ªi—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏.", reply_markup=start_keyboard())

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    await message.answer("‚úèÔ∏è –í–≤–µ–¥i—Ç—å –≤–∞—à–µ i–º‚Äô—è:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda msg: msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def handle_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –ù–∞—Ç–∏—Å–Ωi—Ç—å, —â–æ–± –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=contact_keyboard())

# –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
@dp.message_handler(lambda msg: msg.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def send_terms(message: types.Message):
    try:
        doc = InputFile("full_temp_terms.pdf")
        await bot.send_document(message.chat.id, doc, caption="üìé –û–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ —É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
    except:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —É–º–æ–≤.")

# –ó–≤'—è–∑–æ–∫ –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
@dp.message_handler(lambda msg: msg.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def connect_to_operator(message: types.Message):
    user_id = message.from_user.id
    user = user_state.get(user_id, {})
    if not user:
        return await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø–æ—á–∞—Ç–∫—É –ø–æ–¥i–ªi—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
    user_state[user_id]['chat_active'] = True
    active_chats[user_id] = True
    await message.answer("üìù –û–ø–∏—ài—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –Ω–∏–∂—á–µ.", reply_markup=back_keyboard())
    for op in OPERATORS:
        await bot.send_message(op, f"üì® –ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤i–¥ <b>{user['name']}</b> <code>{user['phone']}</code>.\n–©–æ–± –≤i–¥–ø–æ–≤i—Å—Ç–∏, –ø—Ä–æ—Å—Ç–æ —Å–≤–∞–π–ø–Ωi—Ç—å –Ω–∞ –ø–æ–≤i–¥–æ–º–ª–µ–Ω–Ω—è.", parse_mode='HTML')

# –ü–µ—Ä–µ–ø–∏—Å–∫–∞
@dp.message_handler(lambda msg: active_chats.get(msg.from_user.id))
async def relay_to_operator(message: types.Message):
    user = user_state.get(message.from_user.id)
    if not user:
        return
    for op in OPERATORS:
        await bot.send_message(op, f"‚úâÔ∏è <b>{user['name']}</b>: {message.text}", parse_mode='HTML')

@dp.message_handler(lambda msg: msg.reply_to_message and msg.from_user.id in OPERATORS)
async def operator_reply(message: types.Message):
    reply_text = message.reply_to_message.text
    try:
        user_id_line = [line for line in reply_text.split('\n') if '>' not in line][-1]
        name = user_id_line.split(':')[0].replace('‚úâÔ∏è', '').strip()
        user_id = next((uid for uid, data in user_state.items() if data.get('name') == name), None)
        if not user_id:
            return await message.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        await bot.send_message(user_id, f"üí¨ –íi–¥–ø–æ–≤i–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {message.text}")
    except Exception as e:
        await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤i–¥–ø–æ–≤i–¥i –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
@dp.message_handler(lambda msg: msg.text == "üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    user_id = message.from_user.id
    active_chats.pop(user_id, None)
    user_state[user_id]['chat_active'] = False
    await message.answer("üîö –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ωi—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.", reply_markup=types.ReplyKeyboardRemove())
    for op in OPERATORS:
        await bot.send_message(op, f"üîî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_state[user_id]['name']} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
