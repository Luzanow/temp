import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from collections import defaultdict

API_TOKEN = "7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o"
ADMIN_ID = 5498505652
TERMS_FILE = "full_temp_terms.pdf"  # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Ü–µ–π —Ñ–∞–π–ª —É —Ç—ñ–π –∂–µ –ø–∞–ø—Ü—ñ!

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}
active_chats = {}
chat_links = {}
timeouts = {}

# –ö–Ω–æ–ø–∫–∏
def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    kb.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    return kb

def chat_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"))
    return kb

def back_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return kb

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ —É TEMP! –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.", reply_markup=start_keyboard())

# –ö–æ–Ω—Ç–∞–∫—Ç
@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:", reply_markup=types.ReplyKeyboardRemove())

# –Ü–º‚Äô—è
@dp.message_handler(lambda msg: msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def handle_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=chat_keyboard())

# –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
@dp.message_handler(lambda msg: msg.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def handle_terms(message: types.Message):
    try:
        await message.answer_document(InputFile(TERMS_FILE))
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ PDF. –ü–µ—Ä–µ–≤—ñ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —à–ª—è—Ö—É –¥–æ —Ñ–∞–π–ª—É.")
        logging.error(e)

# –ó–≤‚Äô—è–∑–æ–∫ –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
@dp.message_handler(lambda msg: msg.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def handle_contact_operator(message: types.Message):
    uid = message.from_user.id
    active_chats[uid] = True
    chat_links[ADMIN_ID] = uid
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.", reply_markup=back_keyboard())

    await bot.send_message(
        ADMIN_ID,
        f"üì© –ó–∞–ø–∏—Ç –≤—ñ–¥ <b>{user_state[uid]['name']}</b> (<code>{user_state[uid]['phone']}</code>)",
        parse_mode="HTML"
    )

    if uid in timeouts:
        timeouts[uid].cancel()
    timeouts[uid] = asyncio.create_task(auto_timeout(uid))

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message_handler(lambda msg: active_chats.get(msg.from_user.id))
async def forward_user_message(message: types.Message):
    uid = message.from_user.id
    user = user_state[uid]
    forward_text = f"üì© <b>{user['name']}</b>: {message.text}"
    await bot.send_message(ADMIN_ID, forward_text, parse_mode="HTML", reply_to_message_id=None)

# –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(lambda msg: msg.reply_to_message and msg.from_user.id == ADMIN_ID)
async def operator_reply(message: types.Message):
    uid = chat_links.get(ADMIN_ID)
    if not uid:
        return await message.reply("‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
    try:
        await bot.send_message(uid, f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {message.text}", reply_markup=back_keyboard())
    except Exception as e:
        logging.error(e)
        await message.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏
@dp.message_handler(lambda msg: msg.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def finish_chat(message: types.Message):
    uid = message.from_user.id
    active_chats.pop(uid, None)
    chat_links.pop(ADMIN_ID, None)
    if uid in timeouts:
        timeouts[uid].cancel()

    await message.answer("‚úÖ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=chat_keyboard())
    await bot.send_message(ADMIN_ID, f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_state[uid]['name']} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def auto_timeout(user_id):
    await asyncio.sleep(600)
    if active_chats.get(user_id):
        active_chats.pop(user_id)
        chat_links.pop(ADMIN_ID, None)
        await bot.send_message(user_id, "‚åõ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ. –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=chat_keyboard())
        await bot.send_message(ADMIN_ID, f"‚ùå –†–æ–∑–º–æ–≤–∞ –∑ {user_state[user_id]['name']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
