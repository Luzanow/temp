
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.exceptions import BotBlocked
import asyncio

API_TOKEN = '7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o'
OPERATORS = [5498505652]  # ID –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}

# /start
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üîß –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"))
    await message.answer(f"–í—ñ—Ç–∞—î–º–æ, {message.from_user.first_name}!")
–Ø–∫ –º–æ–∂–µ–º–æ –¥–æ–ø–æ–º–æ–≥—Ç–∏?", reply_markup=keyboard)

# –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.message_handler(lambda message: message.text == "üîß –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def connect_to_operator(message: types.Message):
    user_state[message.from_user.id] = {'awaiting_response': True}
    await message.answer("‚úçÔ∏è –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤–∞–º —Ç—É—Ç.")
    await asyncio.sleep(180)  # 3 —Ö–≤–∏–ª–∏–Ω–∏
    if user_state.get(message.from_user.id, {}).get('awaiting_response'):
        await message.answer("‚è≥ –í—Å—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ –Ω–∞—Ä–∞–∑—ñ –∑–∞–π–Ω—è—Ç—ñ. –û—á—ñ–∫—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞.")

# –í—Å—ñ —ñ–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Üí –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
@dp.message_handler(lambda message: user_state.get(message.from_user.id, {}).get('awaiting_response'))
async def forward_to_operator(message: types.Message):
    for op_id in OPERATORS:
        try:
            await bot.send_message(op_id, f"üì© –ó–∞–ø–∏—Ç –≤—ñ–¥ @{message.from_user.username or '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}:
{message.text}")
        except BotBlocked:
            pass
    await message.answer("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")
    user_state[message.from_user.id]['awaiting_response'] = False

# –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å –∑ /reply USER_ID —Ç–µ–∫—Å—Ç)
@dp.message_handler(lambda message: message.from_user.id in OPERATORS and message.text.startswith("/reply"))
async def operator_reply(message: types.Message):
    parts = message.text.split(" ", 2)
    if len(parts) < 3:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /reply USER_ID —Ç–µ–∫—Å—Ç")
        return
    user_id, text = parts[1], parts[2]
    try:
        await bot.send_message(int(user_id), f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:
{text}")
        await message.reply("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
