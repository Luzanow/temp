import logging
import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
OPERATORS = [5498505652]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

user_state = {}
active_chats = {}

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True))
    return kb

def waiting_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return kb

def operator_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ —Ä–æ–∑–º–æ–≤—É"), KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return kb

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_state.pop(message.from_user.id, None)
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ —É —Å–ª—É–∂–±—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ <b>TEMP</b>!\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
        reply_markup=start_keyboard()
    )

# –ö–æ–Ω—Ç–∞–∫—Ç
@dp.message_handler(content_types=types.ContentType.CONTACT)
async def contact_handler(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    await message.answer("üñä –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:")

# –Ü–º'—è
@dp.message_handler(lambda m: m.from_user.id in user_state and 'name' not in user_state[m.from_user.id])
async def name_handler(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    await message.answer("üìù –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:")

# –ü–∏—Ç–∞–Ω–Ω—è
@dp.message_handler(lambda m: m.from_user.id in user_state and 'question' not in user_state[m.from_user.id])
async def question_handler(message: types.Message):
    user_state[message.from_user.id]['question'] = message.text
    user_id = message.from_user.id

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    for op_id in OPERATORS:
        await bot.send_message(
            op_id,
            f"üÜï <b>–ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b> üÜï\n\n"
            f"üë§ –Ü–º'—è: <b>{user_state[user_id]['name']}</b>\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{user_state[user_id]['phone']}</code>\n\n"
            f"üìù –ü–∏—Ç–∞–Ω–Ω—è:\n<blockquote>{user_state[user_id]['question']}</blockquote>\n\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—Ä–∏–π–Ω—è—Ç–∏ —Ä–æ–∑–º–æ–≤—É –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏.",
            parse_mode="HTML",
            reply_markup=operator_keyboard()  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        )

    await message.answer(
        "‚è≥ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ ‚Äî –º–∏ –ø—ñ–¥'—î–¥–Ω—É—î–º–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...",
        reply_markup=waiting_keyboard()
    )

# –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–π–º–∞—î —Ä–æ–∑–º–æ–≤—É
@dp.message_handler(lambda message: message.text == "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ —Ä–æ–∑–º–æ–≤—É" and message.from_user.id in OPERATORS)
async def accept_chat(message: types.Message):
    user_id = message.reply_to_message.from_user.id
    active_chats[user_id] = {'operator_id': message.from_user.id}
    await bot.send_message(
        user_id,
        f"üí¨ <b>–û–ø–µ—Ä–∞—Ç–æ—Ä TEMP:</b> –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–π–Ω—è–≤ –≤–∞—à—É —Ä–æ–∑–º–æ–≤—É. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.",
        parse_mode="HTML",
        reply_markup=waiting_keyboard()
    )
    await message.answer("‚úÖ –í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ —Ä–æ–∑–º–æ–≤—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")

# –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑–º–æ–≤—É
@dp.message_handler(lambda message: message.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É" and message.from_user.id in OPERATORS)
async def end_chat_operator(message: types.Message):
    user_id = message.reply_to_message.from_user.id
    await bot.send_message(
        user_id,
        "‚èπ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –î—è–∫—É—î–º–æ, —â–æ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –Ω–∞—Å!",
        parse_mode="HTML",
        reply_markup=start_keyboard()
    )
    active_chats.pop(user_id, None)
    await message.answer("‚úÖ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–∑–º–æ–≤—É
@dp.message_handler(lambda message: message.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É" and message.from_user.id not in OPERATORS)
async def end_chat_user(message: types.Message):
    user_id = message.from_user.id

    if user_id in active_chats:
        op_id = active_chats[user_id]['operator_id']
        await bot.send_message(op_id, f"üîî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_state[user_id]['name']} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")
        active_chats.pop(user_id, None)
        await message.answer(
            "‚úÖ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.",
            reply_markup=start_keyboard()
        )
    else:
        await message.answer("‚ùå –†–æ–∑–º–æ–≤—É –Ω–µ –º–æ–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ —â–µ –Ω–µ –±—É–ª–∞ –ø—Ä–∏–π–Ω—è—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")

# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—à–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
@dp.message_handler(lambda m: m.from_user.id in active_chats)
async def user_message(message: types.Message):
    op_id = active_chats[message.from_user.id]['operator_id']
    await bot.send_message(
        op_id,
        f"üë§ <b>{user_state[message.from_user.id]['name']}</b> –ø–∏—à–µ:\n\n{message.text}",
        parse_mode="HTML"
    )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
