# telegram_support_bot.py

import os
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import MessageNotModified
from dotenv import load_dotenv
from datetime import datetime, timedelta
import asyncio

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPERATORS = [5498505652]  # –∑–∞–º—ñ—Å—Ç—å ADMIN_ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

# –°—Ç–∞–Ω–∏
class ChatState(StatesGroup):
    waiting_name = State()
    waiting_phone = State()
    active_chat = State()

# –°–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_sessions = {}  # user_id: {"accepted": False, "operator_id": None, "last_active": datetime}

# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º
phone_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
phone_keyboard.add(types.KeyboardButton("üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True))

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
def start_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—å –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_operator"))
    return kb

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_sessions.pop(message.from_user.id, None)
    await message.answer("üôãÔ∏è –í—ñ—Ç–∞—î–º–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏.", reply_markup=start_keyboard())

# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è
@dp.callback_query_handler(lambda c: c.data == "contact_operator")
async def contact_operator(callback_query: types.CallbackQuery, state: FSMContext):
    await ChatState.waiting_name.set()
    await callback_query.message.answer("üë§ –Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?", reply_markup=ReplyKeyboardRemove())
    await callback_query.answer()

@dp.message_handler(state=ChatState.waiting_name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await ChatState.waiting_phone.set()
    await message.answer("üìû –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:", reply_markup=phone_keyboard)

@dp.message_handler(content_types=types.ContentType.CONTACT, state=ChatState.waiting_phone)
@dp.message_handler(lambda m: True, state=ChatState.waiting_phone)
async def get_phone(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number if message.contact else message.text
    await state.update_data(phone=phone)

    data = await state.get_data()
    name = data['name']
    user_id = message.from_user.id
    user_sessions[user_id] = {"accepted": False, "operator_id": None, "last_active": datetime.now()}

    for op_id in OPERATORS:
        try:
            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"accept_{user_id}")
            )
            await bot.send_message(op_id, f"üîî –ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:

‚Ä¢ –Ü–º‚Äô—è: {name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}", reply_markup=kb)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}")

    await state.finish()
    await message.answer("‚è≥ –û—á—ñ–∫—É–π—Ç–µ, –æ–ø–µ—Ä–∞—Ç–æ—Ä –∑‚Äô—î–¥–Ω–∞—î—Ç—å—Å—è –∑ –≤–∞–º–∏...", reply_markup=ReplyKeyboardRemove())

# –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–π–º–∞—î
@dp.callback_query_handler(lambda c: c.data.startswith("accept_"))
async def accept_chat(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[1])
    if user_id in user_sessions:
        user_sessions[user_id]["accepted"] = True
        user_sessions[user_id]["operator_id"] = callback_query.from_user.id
        user_sessions[user_id]["last_active"] = datetime.now()

        await bot.send_message(user_id, "üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è. –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏.")
        await bot.send_message(callback_query.from_user.id, "‚úÖ –í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è. –ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ó–∞–≤–µ—Ä—à–∏—Ç–∏:",
                               reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data=f"end_{user_id}")))
    await callback_query.answer()

# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@dp.message_handler(lambda m: m.from_user.id in user_sessions)
async def handle_user_message(message: types.Message):
    session = user_sessions.get(message.from_user.id)
    if not session or not session.get("accepted"):
        await message.answer("‚õî –û—á—ñ–∫—É–π—Ç–µ, –æ–ø–µ—Ä–∞—Ç–æ—Ä —â–µ –Ω–µ –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è.")
        return

    operator_id = session["operator_id"]
    user_sessions[message.from_user.id]["last_active"] = datetime.now()
    await bot.send_message(operator_id, f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:
{message.text}")

# –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞–¥—Å–∏–ª–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å
@dp.message_handler(lambda m: m.from_user.id in OPERATORS)
async def handle_operator_message(message: types.Message):
    for user_id, session in user_sessions.items():
        if session.get("operator_id") == message.from_user.id and session.get("accepted"):
            await bot.send_message(user_id, f"üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä:
{message.text}")
            user_sessions[user_id]["last_active"] = datetime.now()
            break

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–∞—Ç—É
@dp.callback_query_handler(lambda c: c.data.startswith("end_"))
async def end_chat(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[1])
    if user_id in user_sessions:
        await bot.send_message(user_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!")
        await bot.send_message(callback_query.from_user.id, "‚úÖ –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.")
        user_sessions.pop(user_id)
    await callback_query.answer()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (10 —Ö–≤)
async def monitor_timeouts():
    while True:
        now = datetime.now()
        to_remove = []
        for user_id, session in user_sessions.items():
            if session.get("accepted") and now - session["last_active"] > timedelta(minutes=10):
                await bot.send_message(user_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.")
                await bot.send_message(session["operator_id"], f"‚ö†Ô∏è –ß–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.")
                to_remove.append(user_id)
        for uid in to_remove:
            user_sessions.pop(uid)
        await asyncio.sleep(60)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(monitor_timeouts())
    executor.start_polling(dp, skip_updates=True)
