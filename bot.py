import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputFile
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")  # –í .env —Ñ–∞–π–ªi: API_TOKEN=—Ç–æ–∫–µ–Ω
ADMIN_CHAT_ID = 5498505652  # –¢–≤i–π ID
OPERATOR_NAME = "–†–æ–º–∞–Ω"  # –Ü–º'—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

user_state = {}
forwarded_messages = {}
last_user_message_time = {}
waiting_tasks = {}

# –ö–ª–∞–≤i–∞—Ç—É—Ä–∏
def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    kb.add(KeyboardButton("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp"))
    return kb

def back_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return kb

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_state.pop(message.from_user.id, None)
    forwarded_messages.clear()
    last_user_message_time.pop(message.from_user.id, None)
    waiting_tasks.pop(message.from_user.id, None)
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ! –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏.", reply_markup=start_keyboard())

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(lambda msg: msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def handle_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –©–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", reply_markup=back_keyboard())

@dp.message_handler(lambda msg: msg.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def send_terms(message: types.Message):
    try:
        doc = InputFile("full_temp_terms.pdf")
        await bot.send_document(message.chat.id, doc, caption="üìé –û–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ —É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
    except:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —É–º–æ–≤.")

async def wait_for_reply(user_id):
    await asyncio.sleep(300)  # 5 —Ö–≤–∏–ª–∏–Ω
    if user_id in last_user_message_time:
        await bot.send_message(user_id, "‚ö†Ô∏è –í–∏–±–∞—á—Ç–µ, –≤—Å—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ –∑–∞—Ä–∞–∑ –∑–∞–π–Ω—è—Ç—ñ. –ú–∏ —à–≤–∏–¥–∫–æ –∑–Ω–∞–π–¥–µ–º–æ –¥–ª—è –≤–∞—Å —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ.")
        waiting_tasks.pop(user_id, None)

@dp.message_handler(lambda msg: msg.text == "üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    user_id = message.from_user.id
    user_state.pop(user_id, None)
    last_user_message_time.pop(user_id, None)
    waiting_tasks.pop(user_id, None)
    forwarded_messages_to_delete = [fid for fid, uid in forwarded_messages.items() if uid == user_id]
    for fid in forwarded_messages_to_delete:
        forwarded_messages.pop(fid, None)
    await message.answer("üîö –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.", reply_markup=start_keyboard())
    await bot.send_message(ADMIN_CHAT_ID, f"üîî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")

@dp.message_handler()
async def forward_to_operator(message: types.Message):
    if message.text == "üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É":
        return
    if message.from_user.id in user_state:
        user = user_state.get(message.from_user.id)
        if user:
            header = f"üë§ {user['name']} ({user['phone']})"
            await bot.send_message(ADMIN_CHAT_ID, f"üëã –í–∞—Å –≤—ñ—Ç–∞—î —Å–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ TEMP! –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.\n\n{header}")
            forwarded = await bot.send_message(ADMIN_CHAT_ID, f"‚úâÔ∏è {message.text}")
            forwarded_messages[forwarded.message_id] = message.from_user.id
            last_user_message_time[message.from_user.id] = message.date
            if message.from_user.id not in waiting_tasks:
                task = asyncio.create_task(wait_for_reply(message.from_user.id))
                waiting_tasks[message.from_user.id] = task

@dp.message_handler(lambda msg: msg.reply_to_message and msg.from_user.id == ADMIN_CHAT_ID)
async def admin_reply(message: types.Message):
    reply = message.reply_to_message
    if not reply:
        return
    user_id = forwarded_messages.get(reply.message_id)
    if not user_id:
        await message.answer("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
        return
    try:
        await bot.send_message(
            user_id,
            f"""üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ TEMP:\nüë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: {OPERATOR_NAME}\n\n{message.text}"""
        )
        # –Ø–∫—â–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–≤ ‚Äî —Å–∫–∞—Å–æ–≤—É—î–º–æ —Ç–∞–π–º–µ—Ä –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        if user_id in waiting_tasks:
            waiting_tasks[user_id].cancel()
            waiting_tasks.pop(user_id, None)
    except:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
