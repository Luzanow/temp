import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from collections import defaultdict
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o") or "7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o"
ADMIN_ID = 5498505652  # ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
PDF_PATH = "temp_terms_fixed.pdf"  # –≤–∞—à PDF

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –°—Ç–∞–Ω–∏ —Ç–∞ —Ç–∞–π–º–µ—Ä–∏
user_data = defaultdict(dict)
active_chats = {}
timers = {}

def get_main_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    kb.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    return kb

def get_chat_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    return kb

def back_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
    return kb

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    active_chats.pop(user_id, None)
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏.", reply_markup=get_main_keyboard())

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def get_contact(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]['phone'] = message.contact.phone_number
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda m: m.text and 'phone' in user_data.get(m.from_user.id, {}) and 'name' not in user_data[m.from_user.id])
async def get_name(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]['name'] = message.text
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=get_chat_keyboard())

@dp.message_handler(lambda m: m.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def send_terms(message: types.Message):
    if os.path.exists(PDF_PATH):
        await message.answer_document(InputFile(PDF_PATH))
    else:
        await message.answer("‚ùå –§–∞–π–ª —É–º–æ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@dp.message_handler(lambda m: m.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def connect_operator(message: types.Message):
    user_id = message.from_user.id
    active_chats[user_id] = ADMIN_ID
    await message.answer("üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –ú–∏ –≤–∞–º –≤—ñ–¥–ø–æ–≤—ñ–º–æ.", reply_markup=back_keyboard())
    # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ 10 —Ö–≤
    if user_id in timers:
        timers[user_id].cancel()
    timers[user_id] = asyncio.create_task(timeout_checker(user_id))

async def timeout_checker(user_id):
    await asyncio.sleep(600)
    if user_id in active_chats:
        await bot.send_message(user_id, "‚åõ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.", reply_markup=get_chat_keyboard())
        await bot.send_message(ADMIN_ID, f"‚ùå –†–æ–∑–º–æ–≤–∞ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_data[user_id].get('name')} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.")
        active_chats.pop(user_id, None)

@dp.message_handler(lambda m: m.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    user_id = message.from_user.id
    if user_id in active_chats:
        await message.answer("‚úÖ –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–æ–∑–º–æ–≤—É.", reply_markup=get_chat_keyboard())
        await bot.send_message(ADMIN_ID, f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_data[user_id].get('name')} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")
        active_chats.pop(user_id, None)
        if user_id in timers:
            timers[user_id].cancel()

@dp.message_handler(lambda message: message.reply_to_message and message.from_user.id == ADMIN_ID and '/reply' not in message.text)
async def reply_from_operator(message: types.Message):
    try:
        user_id = int(message.reply_to_message.text.split()[2])
        await bot.send_message(user_id, f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n{message.text}", reply_markup=back_keyboard())
    except Exception:
        await message.reply("‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏.")

@dp.message_handler()
async def relay_message(message: types.Message):
    user_id = message.from_user.id
