from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
def operator_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –¥—ñ–∞–ª–æ–≥"))
    kb.add(KeyboardButton("üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return kb

# –°—Ç–∞—Ä—Ç —Ä–æ–∑–º–æ–≤–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É "–ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
@dp.message_handler(lambda msg: msg.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def connect_to_operator(message: types.Message):
    user_id = message.from_user.id
    user = user_state.get(user_id)
    if not user:
        return await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø–æ—á–∞—Ç–∫—É –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
    
    user_state[user_id]['chat_active'] = True
    active_chats[user_id] = True
    
    # –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é "–ü—Ä–∏–π–Ω—è—Ç–∏ –¥—ñ–∞–ª–æ–≥"
    for op in OPERATORS:
        await bot.send_message(op, f"üì® –ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ <b>{user['name']}</b> <code>{user['phone']}</code>.\n–©–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–π–Ω—è—Ç–∏ –¥—ñ–∞–ª–æ–≥'.", reply_markup=operator_keyboard(), parse_mode='HTML')
    
    await message.answer("üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –Ω–∏–∂—á–µ.", reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(lambda msg: active_chats.get(msg.from_user.id) and msg.text != "üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def relay_to_operator(message: types.Message):
    user = user_state.get(message.from_user.id)
    if not user:
        return
    for op in OPERATORS:
        await bot.send_message(op, f"‚úâÔ∏è {user['name']}: {message.text}")

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message_handler(lambda msg: msg.reply_to_message and msg.from_user.id in OPERATORS)
async def operator_reply(message: types.Message):
    reply_text = message.reply_to_message.text
    try:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –Ω–∞ —á–∏—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ–ø–µ—Ä–∞—Ç–æ—Ä
        user_id_line = [line for line in reply_text.split('\n') if '>' not in line][-1]
        name = user_id_line.split(':')[0].replace('‚úâÔ∏è', '').strip()
        user_id = next((uid for uid, data in user_state.items() if data.get('name') == name), None)
        if not user_id:
            return await message.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await bot.send_message(user_id, f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {message.text}")
    except Exception as e:
        await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏
@dp.message_handler(lambda msg: msg.text == "üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    user_id = message.from_user.id
    active_chats.pop(user_id, None)
    user_state.get(user_id, {}).pop('chat_active', None)
    await message.answer("üîö –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.", reply_markup=types.ReplyKeyboardRemove())
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏
    for op in OPERATORS:
        await bot.send_message(op, f"üîî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_state.get(user_id, {}).get('name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")
