import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.exceptions import BotBlocked
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = "7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o"
OPERATORS = [5498505652]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}
active_chats = {}
timeout_tasks = {}

TERMS_FILE = "full_temp_terms.pdf"

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    if user_id in active_chats:
        del active_chats[user_id]
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    keyboard.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏.", reply_markup=keyboard)

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è PDF –∑ —É–º–æ–≤–∞–º–∏
@dp.message_handler(lambda msg: msg.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def send_terms(message: types.Message):
    try:
        with open(TERMS_FILE, 'rb') as doc:
            await message.answer_document(doc)
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
@dp.message_handler(content_types=types.ContentType.CONTACT)
async def get_name(message: types.Message):
    user_state[message.from_user.id] = {
        'phone': message.contact.phone_number,
        'step': 'get_name'
    }
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è:", reply_markup=ReplyKeyboardRemove())

# –í–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
@dp.message_handler(lambda msg: user_state.get(msg.from_user.id, {}).get('step') == 'get_name')
async def save_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    user_state[message.from_user.id]['step'] = 'waiting_operator'
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=keyboard)

# –ó–∞–ø–∏—Ç –Ω–∞ –∑–≤'—è–∑–æ–∫ –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
@dp.message_handler(lambda msg: msg.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def contact_operator(message: types.Message):
    uid = message.from_user.id
    if uid in timeout_tasks:
        timeout_tasks[uid].cancel()
    active_chats[uid] = {'user': uid, 'operator': None, 'active': True}
    user_state[uid]['step'] = 'chatting'
    await message.answer("üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –Ω–∏–∂—á–µ. –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤–∞–º —Ç—É—Ç.", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    timeout_tasks[uid] = asyncio.create_task(close_chat_if_idle(uid))

async def close_chat_if_idle(uid):
    await asyncio.sleep(600)
    if active_chats.get(uid, {}).get('active'):
        active_chats[uid]['active'] = False
        await bot.send_message(uid, "‚åõ –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –º–µ–Ω—é /start")
        for op in OPERATORS:
            await bot.send_message(op, f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {uid} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.")

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message_handler(lambda msg: active_chats.get(msg.from_user.id, {}).get('active'))
async def forward_to_operator(message: types.Message):
    uid = message.from_user.id
    user = user_state.get(uid)
    text = f"üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ <b>{user.get('name')}</b> (<code>{user.get('phone')}</code>):\n{message.text}"
    for op in OPERATORS:
        msg_sent = await bot.send_message(op, text, parse_mode='HTML')
        active_chats[uid]['operator'] = msg_sent.chat.id
    timeout_tasks[uid].cancel()
    timeout_tasks[uid] = asyncio.create_task(close_chat_if_idle(uid))

# –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ reply
@dp.message_handler(lambda msg: msg.reply_to_message and msg.from_user.id in OPERATORS)
async def operator_reply(message: types.Message):
    try:
        lines = message.reply_to_message.text.split("\n")
        phone_line = next((line for line in lines if line.startswith("üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥")), None)
        if not phone_line:
            return await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        uid = None
        for key, val in user_state.items():
            if val.get("phone") in message.reply_to_message.text:
                uid = key
                break
        if not uid:
            return await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await bot.send_message(uid, f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {message.text}")
    except:
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")

# –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É
@dp.message_handler(lambda msg: msg.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    uid = message.from_user.id
    if uid in active_chats:
        active_chats[uid]['active'] = False
        await message.answer("‚úÖ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –º–µ–Ω—é /start", reply_markup=ReplyKeyboardRemove())
        for op in OPERATORS:
            await bot.send_message(op, f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {uid} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
