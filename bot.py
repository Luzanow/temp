import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

API_TOKEN = "7862608221:AAEixkRNQwwkhBVv0sLGevAdrcA9egHr20o"
ADMIN_CHAT_ID = 5498505652

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}
active_chats = {}

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    keyboard.add("üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É–º–æ–≤–∏.", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def get_name(message: types.Message):
    user_state[message.from_user.id] = {'phone': message.contact.phone_number}
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è:", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(lambda msg: msg.text and msg.from_user.id in user_state and 'name' not in user_state[msg.from_user.id])
async def save_name(message: types.Message):
    user_state[message.from_user.id]['name'] = message.text
    user_state[message.from_user.id]['chatting'] = False
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text == "üí¨ –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def start_chat(message: types.Message):
    uid = message.from_user.id
    user_state[uid]['chatting'] = True
    active_chats[uid] = ADMIN_CHAT_ID
    await message.answer("üìù –ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(600)
    if user_state[uid].get('chatting'):
        user_state[uid]['chatting'] = False
        await message.answer("‚åõ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.")
        await bot.send_message(ADMIN_CHAT_ID, f"‚ùó –†–æ–∑–º–æ–≤–∞ –∑ {uid} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ 10 —Ö–≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.")

@dp.message_handler(lambda msg: msg.text == "üìÑ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Temp")
async def send_terms(message: types.Message):
    with open("full_temp_terms.pdf", "rb") as doc:
        await message.answer_document(doc)

@dp.message_handler(lambda message: user_state.get(message.from_user.id, {}).get('chatting'))
async def forward_to_operator(message: types.Message):
    uid = message.from_user.id
    user = user_state[uid]
    text = f"üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user['name']} ({user['phone']}):\n{message.text}"
    await bot.send_message(ADMIN_CHAT_ID, text)

@dp.message_handler(commands=['reply'])
async def reply_command(message: types.Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return await message.answer("‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏: /reply user_id —Ç–µ–∫—Å—Ç")
    uid, text = int(parts[1]), parts[2]
    if user_state.get(uid, {}).get('chatting'):
        await bot.send_message(uid, f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {text}")
    else:
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É –∞–±–æ –Ω–µ –≤ —á–∞—Ç—ñ.")

@dp.message_handler(lambda msg: msg.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def end_chat(message: types.Message):
    uid = message.from_user.id
    user_state[uid]['chatting'] = False
    await message.answer("‚úÖ –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add("/start"))
    await bot.send_message(ADMIN_CHAT_ID, f"‚ùó –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {uid} –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–∑–º–æ–≤—É.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
